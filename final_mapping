// main
// Grab Canvas element
const canvas = document.getElementById('initechtris');
const context = canvas.getContext('2d');

context.scale(20, 20);

// Game Class
// clear Row from Board
function arenaSweep() {
  let rowCount = 1;
  outer: for (let y = arena.length - 1; y > 0; --y) {
    for(let x = 0; x < arena[y].length; ++x) {
      if (arena[y][x] === 0) {
        continue outer;
      }
    }

    const row = arena.splice(y, 1)[0].fill(0);
    arena.unshift(row);
    ++y;

    player.score+= rowCount * 100;
    rowCount *= 2;
  }
}

// Game Class
// switch to nested for loops
// convert ++y to y++
function collide(arena, player) {
  const m = player.matrix;
  const o = player.pos;
  for (let y = 0; y < m.length; ++y) {
    for (let x = 0; x < m[y].length; ++x) {
      if (m[y][x] !== 0 &&
      (arena[y + o.y] &&
        arena[y + o.y][x + o.x]) !== 0) {
          return true;
      }
    }
  }
  return false;
}

// Board
// renderBoard
// fill with another color
function createMatrix(w,h) {
  const matrix = [];
  while (h--) {
    matrix.push(new Array(w).fill(0));
  }
  return matrix;
}

// Piece
// convert to switch statement
function createPiece(type) {
  if (type === "I") {
    return [
      [0,1,0,0],
      [0,1,0,0],
      [0,1,0,0],
      [0,1,0,0],
    ];
  } else if (type === "L") {
    return [
      [0,2,0],
      [0,2,0],
      [0,2,2],
    ];
  } else if (type === "J") {
    return [
      [0,3,0],
      [0,3,0],
      [3,3,0],
    ];
  } else if (type === "O") {
    return [
      [4,4],
      [4,4],
    ];
  } else if (type === "Z") {
    return [
      [5,5,0],
      [0,5,5],
      [0,0,0],
    ];
  } else if (type === "S") {
    return [
      [0,6,6],
      [6,6,0],
      [0,0,0],
    ];
  } else if (type === "T") {
    return [
      [0,7,0],
      [7,7,7],
      [0,0,0],
    ];
  }
}

// Game
// render piece
// renderPiece
function drawMatrix(matrix, offset) {
  matrix.forEach((row, y) => {
    row.forEach((value, x) => {
      if (value !== 0) {
        context.fillStyle = colors[value];
        // add shading using canvas
        // http://stackoverflow.com/questions/36615592/canvas-inner-stroke

        context.fillRect(x + offset.x,
                         y + offset.y,
                          1, 1);
      }
    });
  });
}

// Game
// rotatePiece(block, direction)
// transpose
function rotate(matrix, dir) {
  for (let y = 0; y < matrix.length; ++y) {
    for (let x = 0; x < y.length; ++y) {
      [
        matrix[x][y],
        matrix[y][x],
      ] = [
        matrix[y][x],
        matrix[x][y],
      ];
    }
  }

  if (dir > 0) {
    matrix.forEach(row => row.reverse());
  } else {
    matrix.reverse();
  }
}

// Game
// gameplay drop
function playerDrop() {
  player.pos.y++;
  if(collide(arena, player)) {
    player.pos.y--;
    merge(arena, player);
    playerReset();
    arenaReset();
    updateScore();
  }
  dropCounter = 0;
}

// Game
// pieceShift
function playerMove(offset) {
  player.pos.x += offset;
  if (collide(arena, player)) {
    player.pos.x -= offset;
  }
}

// Game
// newPiece
function playerReset() {
  const pieces = 'TJLOSZI';
  player.matrix = createPiece(pieces[pieces.length * Math.random() | 0]); // Math.floor
  player.pos.y = 0;
  // position midpoint of new piece in center of board
  player.pos.x = (arena[0].length / 2 | 0) -
    (player.matrix[0].length / 2 | 0);
  if (collide(arena, player)) {
    // gameOver()
      // reset Board
      arena.forEach(row => row.fill(0));
      // separate into resetScore() method
      player.score = 0;
      updateScore();
  }
}

// Game
// pieceRotate(direction)
function playerRotate(dir) {
  const pos = player.pos.x;
  let offset = 1;
  rotate(player.matrix, dir); //transpose(matrix, direction)
  // check for space to the left & right for piece to rotate
  while (collide(arena, player)) {
    player.pos.x += offset;
    offset = -(offset + (offset > 0 ? 1 : -1));
    if (offset > player.matrix[0].length) {
      rotate(player.matrix, -dir);
      player.pos.x = pos;
      return;
    }
  }
}

// Game
// Counters for game to drop piece
let dropCounter = 0;
let dropInterval = 10000;

let lastTime = 0;
// convert to setTimeout(playerDrop, 1000)
function update(time = 0) {
  // while (!this.paused) {
  const deltaTime = time - lastTime;
  dropCounter += deltaTime;
  if (dropCounter > dropInterval) {
    playerDrop();
  }

  lastTime = time;

  draw();
  requestAnimationFrame(update);
}

function updateScore() {
  document.getElementById('score').innerText = player.score;

  document.addEventListener('keydown', event => {
    if (event.keyCode === 37) {
      playerMove(-1);
    } else if (event.keyCode === 39) {
      playerMove(1);
    } else if (event.keyCode === 40) {
      playerDrop();
    } else if (event.keyCode === 81) {
      playerRotate(-1);
    } else if (event.keyCode === 87) {
      playerRotate(1);
    }
  });

  const colors = [
    null,
   '#FF0D72',
   '#0DC2FF',
   '#0DFF72',
   '#F538FF',
   '#FF8E0D',
   '#FFE138',
   '#3877FF',
 ];

 const arena = createMatrix(12, 20);

const player = {
    pos: {x: 0, y: 0},
    matrix: null,
    score: 0,
};

playerReset();
updateScore();
update();
}

// *********************************************************************************

// Game
// pause() {
//   game = clearTimeout(game) {
//     if (!gamePaused) {
//       game = clearTimeout(game);
//       game.paused = true;
//     } els eif (gamePaused) {
//       game = setTimeout(playerDrop, 1000);
//       game.paused = false;
//     }
//   };
// }

// Game
// reset()
  // resets board()
  // starts new game
      // reset board
      // reset score
      //
      // setTimeout(playerDrop, 1000)
// start()
